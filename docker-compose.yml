version: '3'
networks:
  pulsar-net:
    driver: bridge
  app-net:
    driver: bridge
  company-data-auditor-net:
    driver: bridge
  company-data-collector-net:
    driver: bridge
  company-data-presenter-net:
    driver: bridge
  company-data-processor-net:
    driver: bridge

services:
# Start zookeeper

  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: [ "pulsar" ]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar-net
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30


# Init cluster metadata

  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: [ "pulsar" ]
    networks:
      - pulsar-net
    command: >
      bin/pulsar initialize-cluster-metadata \
               --cluster cluster-a \
               --zookeeper zookeeper:2181 \
               --configuration-store zookeeper:2181 \
               --web-service-url http://broker:8080 \
               --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy


# Start bookie

  bookie:
    image: apachepulsar/pulsar:latest
    profiles: [ "pulsar" ]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar-net
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
# Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"


# Start broker

  broker:
    image: apachepulsar/pulsar:latest
    profiles: [ "pulsar" ]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar-net
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      # - advertisedListeners=external:pulsar://127.0.0.1:6650
      - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"


# Real State Alpes Services

  company-data-auditor_db:
    image: postgres:latest
    container_name: company-data-auditor_db
    hostname: company-data-auditor_db
    profiles: [ "rs-alpes", "company-data-auditor" ]
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: company-data-auditor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
        - "5433:5432"
    networks:
      - company-data-auditor-net

  company-data-auditor:
    container_name: company-data-auditor
    hostname: company-data-auditor
    profiles: [ "rs-alpes", "company-data-auditor" ]
    build:
      context: .
      dockerfile: company_data_auditor.Dockerfile
    depends_on:
      company-data-auditor_db:
        condition: service_healthy
    environment:
      - RS_ALPES_ADDRESS=company-data-auditor
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@company-data-auditor_db:5432/company-data-auditor
      - PULSAR_ADDRESS=broker
      - BROKER_HOST=broker
      - PYTHONUNBUFFERED=1      
    ports:
      - "5000:5000"
    networks:
      - app-net
      - company-data-auditor-net
      - pulsar-net

  company-data-collector_db:
    image: postgres:latest
    container_name: company-data-collector_db
    hostname: company-data-collector_db
    profiles: [ "rs-alpes", "company-data-collector" ]
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: company-data-collector
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    networks:
      - company-data-collector-net

  company-data-collector:
    container_name: company-data-collector
    hostname: company-data-collector
    profiles: [ "rs-alpes", "company-data-collector" ]
    build:
      context: .
      dockerfile: company_data_collector.Dockerfile
    depends_on:
      company-data-collector_db:
        condition: service_healthy
    environment:
      - RS_ALPES_ADDRESS=company-data-collector
      - DATABASE_URL=postgresql+psycopg2://postgres:postgres@company-data-collector_db:5432/company-data-collector
      - PULSAR_ADDRESS=broker
      - BROKER_HOST=broker
    ports:
      - "5001:5000"
    networks:
      - app-net
      - company-data-collector-net
      - pulsar-net

  company-data-presenter_db:
    image: postgres:latest
    container_name: company-data-presenter_db
    hostname: company-data-presenter_db
    profiles: [ "rs-alpes", "company-data-presenter" ]
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: company-data-presenter
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    networks:
      - company-data-presenter-net

  company-data-presenter:
     container_name: company-data-presenter
     hostname: company-data-presenter
     profiles: [ "rs-alpes", "company-data-presenter" ]
     build:
       context: .
       dockerfile: company_data_presenter.Dockerfile
     depends_on:
       company-data-presenter_db:
         condition: service_healthy
     environment:
       - RS_ALPES_ADDRESS=company-data-presenter
       - DATABASE_URL=postgresql+psycopg2://postgres:postgres@company-data-presenter_db:5432/company-data-presenter
       - PULSAR_ADDRESS=broker
       - BROKER_HOST=broker
     ports:
       - "5002:5000"
     networks:
       - app-net
       - company-data-presenter-net
       - pulsar-net

  company-data-processor_db:
    image: postgres:latest
    container_name: company-data-processor_db
    hostname: company-data-processor_db
    profiles: [ "rs-alpes", "company_data_processor" ]
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: company-data-processor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5436:5432"
    networks:
      - company-data-processor-net

  company-data-processor:
     container_name: company-data-processor
     hostname: company-data-processor
     profiles: [ "rs-alpes", "company_data_processor" ]
     build:
       context: .
       dockerfile: company_data_processor.Dockerfile
     depends_on:
       company-data-processor_db:
         condition: service_healthy
     environment:
       - RS_ALPES_ADDRESS=company-data-processor
       - DATABASE_URL=postgresql+psycopg2://postgres:postgres@company-data-processor_db:5432/company-data-processor
       - PULSAR_ADDRESS=broker
       - BROKER_HOST=broker
     ports:
       - "5003:5000"
     networks:
       - app-net
       - company-data-processor-net
       - pulsar-net


# Notification Services

  notificator:
    container_name: notificator
    hostname: notificator
    profiles: [ "notificator" ]
    build:
      context: .
      dockerfile: notificator.Dockerfile
    depends_on:
      - broker
      - company-data-auditor
      - company-data-collector
      # - company_data_presenter
      # - company_data_processor
    environment:
      - RS_ALPES_ADDRESS=company-data-collector
      - PULSAR_ADDRESS=broker
    networks:
      - pulsar-net

  #BFF
  bff:
    container_name: bff
    hostname: bff
    profiles: [ "rs-alpes", "bff" ]
    build:
      context: .
      dockerfile: bff.Dockerfile
    depends_on:
     - company-data-presenter
     - broker
    environment:
     - RS_ALPES_ADDRESS=bff
     - BROKER_HOST=broker
    networks:
     - pulsar
    ports:
     - "8003:8003" 




